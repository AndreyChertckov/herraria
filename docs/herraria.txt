-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub
@package herraria
@version 0.0.1

module Herraria.Config
data Direction
UP :: Direction
LEFT :: Direction
DOWN :: Direction
RIGHT :: Direction

-- | Base unit scale
unit :: Float
instance GHC.Enum.Enum Herraria.Config.Direction
instance GHC.Classes.Eq Herraria.Config.Direction
instance GHC.Show.Show Herraria.Config.Direction


-- | Module responsible for physics
module Herraria.Physics
type Acceleration = Point
type Velocity = Point

-- | Physical body of the object Maybe circular body and rectangular body
data RigidBody a
RectangleBody :: Point -> Point -> a -> RigidBody a

-- | Position of leftmost up corner
[_coords] :: RigidBody a -> Point

-- | Size of the body
[_widthHeight] :: RigidBody a -> Point

-- | Link to the object
[_object] :: RigidBody a -> a
CircleBody :: Point -> Float -> a -> RigidBody a

-- | Coordinates of central point
[_centralPoint] :: RigidBody a -> Point

-- | Radius of circle
[_radius] :: RigidBody a -> Float

-- | Link to the object
[_object] :: RigidBody a -> a

-- | Normalize vector
normalize :: Point -> Point

-- | Zero acceleration
initAcceleration :: Acceleration

-- | Zero velocity
initVelocity :: Velocity

-- | Base gravity
gravity :: Acceleration

-- | Check collision between two Physical body
checkCollision :: RigidBody a -> RigidBody b -> Bool
instance GHC.Show.Show a => GHC.Show.Show (Herraria.Physics.RigidBody a)


-- | Module with generation of the level
module Herraria.Level
data Block
Air :: Block
Ground :: Block
Bedrock :: Block

-- | Chunk of Blocks Dimensions: chunkHeight by chunkWidth
newtype Chunk a
Chunk :: Vector (Vector a) -> Chunk a
[getChunk] :: Chunk a -> Vector (Vector a)

-- | Level is an infinite list of chunks with focus on current player
--   position
data Level
Level :: [Chunk Block] -> Chunk Block -> [Chunk Block] -> Int -> Level
[leftChunks] :: Level -> [Chunk Block]
[curChunk] :: Level -> Chunk Block
[rightChunks] :: Level -> [Chunk Block]
[curIndex] :: Level -> Int

-- | Default chunk height
chunkHeight :: Int

-- | Default chunk width
chunkWidth :: Int

-- | Put given block to given position in Chunk
putBlock :: (Int, Int) -> Block -> Chunk Block -> Chunk Block

-- | Apply a function to every element of a chunk and its position.
imapChunk :: (Int -> Int -> a -> b) -> Chunk a -> Chunk b

-- | Convert Chunk to List of Lists.
chunkToLists :: Chunk a -> [[a]]

-- | Convert List of Lists to Chunk.
chunkFromLists :: [[a]] -> Chunk a

-- | Load next left chunk.
moveToLeft :: Level -> Level

-- | Load next right chunk.
moveToRight :: Level -> Level

-- | Transform Block to Physical body.
blockToRigidBody :: Float -> Int -> Int -> Block -> Maybe (RigidBody Block)

-- | Transform block to coordinates and size
blockToCoords :: Int -> Int -> Block -> (Point, Point)

-- | Chuk with all Air
emptyChunk :: Chunk Block

-- | Default chunk with badrock, ground and air
defaultChunk :: Chunk Block

-- | Generates infinite list of random values
infiniteRandomValues :: (Int -> a) -> StdGen -> [a]

-- | Generate absolute random subchunk of ground
generateRandomGround :: Int -> StdGen -> Vector (Vector Block)

-- | Generate random column of ground Generate value from minHeight to
--   maxHeight, make column of ground with generated height
generateRandomColumnGround :: Int -> Int -> StdGen -> Vector (Vector Block)

-- | Generate random delta. Height of column of ground equal to height of
--   previous height + delta
generateRecurentGround :: Int -> Int -> Int -> Int -> StdGen -> Vector (Vector Block)

-- | Generate random chunk with recurent random ground.
randomChunk :: StdGen -> Chunk Block

-- | Constructor of level
defaultLevel :: Level
instance GHC.Classes.Eq a => GHC.Classes.Eq (Herraria.Level.Chunk a)
instance GHC.Show.Show a => GHC.Show.Show (Herraria.Level.Chunk a)
instance GHC.Enum.Bounded Herraria.Level.Block
instance GHC.Enum.Enum Herraria.Level.Block
instance GHC.Classes.Eq Herraria.Level.Block
instance GHC.Show.Show Herraria.Level.Block
instance GHC.Show.Show Herraria.Level.Level
instance GHC.Classes.Eq Herraria.Level.Level
instance GHC.Base.Functor Herraria.Level.Chunk


-- | This module responsible for Player data
module Herraria.Player
data Player
Player :: Point -> Picture -> Velocity -> Acceleration -> RigidBody Player -> Player

-- | Coordinats of player.
[playerCoords] :: Player -> Point

-- | Picture of the player.
[playerPic] :: Player -> Picture

-- | Velocity of the player.
[playerVelocity] :: Player -> Velocity

-- | Acceleration of the player
[playerAcceleration] :: Player -> Acceleration

-- | Physical body of the player
[rigidBody] :: Player -> RigidBody Player

-- | Base player speed
basePlayerSpeed :: Float

-- | Base Acceleration of the player
basePlayerAcceleration :: Float

-- | Picture of the player
playerPicture :: Picture

-- | Constructor of the player
initPlayer :: Player

-- | Draw player Move picture to coordinates
drawPlayer :: Player -> Picture
instance GHC.Show.Show Herraria.Player.Player


-- | Module responsible for interaction with World
module Herraria.World

-- | State of the game
data GameState
GameState :: Player -> Level -> Set Key -> GameState

-- | Player
[gamePlayer] :: GameState -> Player

-- | Current level
[gameLevel] :: GameState -> Level

-- | Save pressed keys, needed to move player on hold down the key
[gameKeys] :: GameState -> Set Key

-- | Scale gloss coordinates to game coordinates
scaleInput :: Point -> Point

-- | Move coordinates to the center
shiftInput :: Point -> Point

-- | Mouse coordinates to game coordinates
mouseToPlayer :: Point -> Point

-- | Floor point
pointToInt :: (Float, Float) -> (Int, Int)

-- | Input coordinates to block in chunk coordinates
inputToChunkInt :: Float -> Point -> Point -> (Int, Int)

-- | Update pressed keys
updatePressed :: KeyState -> Key -> Set Key -> Set Key

-- | From mouse button to block
blockToPut :: MouseButton -> Block

-- | Update world
handleWorld :: Event -> GameState -> GameState

-- | Map key to Direction
keyToDirection :: Key -> Maybe Direction

-- | Map direction to vector
directionToVec :: Direction -> Point

-- | Check Colision of player with level
checkCollisionWithLevel :: RigidBody Player -> Level -> Bool

-- | Check either point in chunk or not. Return Nothing if in chunk. Return
--   Just Left if the point left from chunk. Return Just Right if the point
--   right from chunk.
notInChunk :: Float -> Point -> Chunk Block -> Maybe Direction

-- | Update Physics of the game. Move player and level if needed Check
--   collisions of player with level
updatePhysics :: Float -> GameState -> GameState

-- | Default world
initWorld :: GameState


-- | Module responsible for drawing the game
module Herraria.Render

-- | Color of the air
airBlue :: Color

-- | Center the view on the player
focusOnPlayer :: Player -> Picture -> Picture

-- | Scale view
scaleViewPort :: Float -> Picture -> Picture

-- | Main function of drawing
drawWorld :: GameState -> Picture

-- | Draw base grid
drawGrid :: Picture

-- | Base block picture
unitBlockPic :: Picture

-- | Draw block
drawBlock :: Block -> Picture

-- | Draw block with some shift
drawBlockAt :: Int -> Int -> Block -> Picture

-- | Draw chunk with ofset to zero chunk
drawChunkAt :: Int -> Chunk Block -> Picture

-- | Draw chunk
drawChunk :: Chunk Block -> Picture

-- | How many chunks will draw at time
loadedChunksAmount :: Int

-- | Draw level
drawLevel :: Level -> Picture

module Herraria
window :: Display
background :: Color
run :: IO ()
